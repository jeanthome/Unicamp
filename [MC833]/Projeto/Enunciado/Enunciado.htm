<!DOCTYPE html>
<!-- saved from url=(0072)http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>MC833AB - Programação de Redes de Computadores</title>

    <!-- Bootstrap Core CSS -->
    <link href="./Enunciado_files/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="./Enunciado_files/business-casual.css" rel="stylesheet">

    <!-- Fonts -->
    <link href="./Enunciado_files/css" rel="stylesheet" type="text/css">
    <link href="./Enunciado_files/css(1)" rel="stylesheet" type="text/css">

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

</head>

<body>

    <div class="brand">MC833AB - Programação de Redes de Computadores</div>
    <div class="address-bar">Prof. Paulo Lício de Geus</div>
    <div class="address-bar">2016/1</div>

    <!-- Navigation -->
    <nav class="navbar navbar-default" role="navigation">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <!-- navbar-brand is hidden on larger screens, but visible when the menu is collapsed -->
                <a class="navbar-brand" href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/index.html">MC833AB - 2016/1</a>
            </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
              <ul class="nav navbar-nav">
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/index.html">Home</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/tarefa01.html">tarefa 01</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/tarefa02.html">tarefa 02</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/tarefa03.html">tarefa 03</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/tarefa04.html">tarefa 04</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/tarefa05.html">tarefa 05</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/tarefa06.html">tarefa 06</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/tarefa07.html">tarefa 07</a>
                  </li>
                  <li>
                      <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html" style="background-color: hsla(180, 17%, 55%, 0.42)">projeto</a>
                  </li>
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container -->
    </nav>

    <div class="container">

        <div class="row">
            <div class="box">
                <div class="col-lg-12">
                    <hr>
                    <h2 class="intro-text text-center">
                        <strong>Projeto Final</strong>
                    </h2>
                    <hr>

                    <p><strong>Objetivo:</strong> Consolidar os conceitos aprendidos durante o curso.</p>
                    <p><strong>Critérios para entrega e correção do projeto: </strong>
                      </p><ol>
                        <span class="pr-item">
                          <li>O projeto pode ser feito por 1 ou 2 alunos;</li>
                          <li>Um relatório completo explicando a idéia, decisões de projeto e implementação, demonstrando o uso do projeto desenvolvido
                            e incluindo toda e qualquer informação de qualidade que possa ser relevante na avaliação do projeto,
                            tanto como idéia quanto como implementação, deve ser entregue em um arquivo <strong>.pdf</strong>.
                            O nome do arquivo <strong>.pdf</strong> deve ser "projeto-raXXXXXX[-raYYYYYY]", onde XXXXXX deve ser substituído pelo número
                            do seu RA (caso seja feito em dupla, colocar os dois RAs);</li>
                          <li>Todos os arquivos relevantes para a execução do projeto (incluindo código-fonte a ser compilado e instruções
                            para compilação, incluindo dependências) devem
                            ser entregues, empacotados em um único arquivo <strong>.zip</strong>;</li>
                          <li>O arquivo <strong>.pdf</strong> e o arquivo <strong>.zip</strong> devem ser entregues pelo
                            <a href="https://susy.ic.unicamp.br:9999/mc833ab">SuSy</a> até as 23:55 do dia 30/06/2016.</li>
                          <li>demonstração <strong>obrigatória</strong>. Aberta a partir do dia 23/06/2016.</li>
                          <li><strong>peso: 6</strong></li>
                          <li>A nota será composta de forma incremental, da seguinte forma:</li>
                          <ul>
                            <li>Implementação do Projeto Base: 70% da nota de projeto</li>
                            <li>Implementação do Incremento 1: +10% da nota de projeto</li>
                            <li>Implementação de confirmação de aceite de arquivo: +5% da nota de projeto</li>
                            <li>Implementação do Incremento 2: +10% da nota de projeto</li>
                            <li>Implementação de confirmação de aceite de jogo: +5% da nota de projeto</li>
                            <li>A implementação de confirmação de aceite só será considerada caso o respectivo incremento esteja correto</li>
                          </ul>
                          <li>Apenas para quem implementar todos os incrementos: um bônus de até +20% na nota de projeto, para quem desejar melhorar a nota final da disciplina,
                            será dado a quem implementar um mecanismo de canal seguro de comunicação entre dois clientes.</li>
                        </span>
                      </ol>
                    <p></p>

                   <hr>
                   <p><strong>Idéia sugerida</strong></p>

                      <p>A idéia abaixo é apenas uma sugestão, os alunos têm liberdade para sugerir as próprias idéias
                        de projeto. Ainda assim, as idéias próprias deverão passar por validação do Prof. Paulo e do PED-C Bruno,
                        antes de liberadas para execução. Portanto, caso queira sugerir uma idéia própria, fazê-lo com antecedência.</p>
                   <br>

                   <h4>
                     <b>Projeto Base: Aplicação de chat (com chat-rooms)</b>
                   </h4>

                     A idéia é construir uma aplicação de chat, com suporte mínimo aos seguintes requisitos:
                     <ul>
                         <li>Múltiplos clientes (com registro de usuário)</li>
                         <li>Servidor centralizado, capaz de armazenar mensagens para clientes que estão
                         offline, e entregá-las quando o cliente ficar online.</li>
                         <li>Chat-rooms</li>
                         <li>Feedback para os clientes (estilo WhatsApp):</li>
                           <ul>
                             <li>Marcador de mensagem enviada com sucesso</li>
                             <li>Marcador de mensagem recebida pelo destinatário</li>
                           </ul>
                     </ul>
                     Todas as interfaces podem ser do tipo CLI (linha de comando); GUIs não são obrigatórias.
<br>
<br>
<p>
Protocolo a ser usado como interface dos clientes com o servidor:
</p>

<pre id="exemplos">./server &lt;port&gt; 	            # Servidor é iniciado na porta &lt;port&gt;
./client &lt;ip&gt; &lt;port&gt; &lt;name&gt;         # Cliente &lt;name&gt; é iniciado, conectado ao servidor localizado em &lt;ip&gt;:&lt;port&gt;, \
 registrado no servidor, e recebe uma sessão vazia (denotada aqui por '$[&lt;name&gt;]')
$[&lt;name&gt;] SEND &lt;peer_name&gt; &lt;msg&gt;    # Cliente &lt;name&gt; envia mensagem &lt;msg&gt; para cliente &lt;peer_name&gt;
$[&lt;name&gt;] CREATEG &lt;group_name&gt;      # Cliente &lt;name&gt; cria grupo &lt;group_name&gt;
$[&lt;name&gt;] JOING &lt;group_name&gt;        # Cliente &lt;name&gt; entra no grupo &lt;group_name&gt;
$[&lt;name&gt;] SENDG &lt;group_name&gt; &lt;msg&gt;  # Cliente &lt;name&gt; envia mensagem para grupo &lt;group_name&gt;
$[&lt;name&gt;] WHO                       # Cliente &lt;name&gt; pede ao servidor lista dos usuários, e ao recebê-la, imprime na tela
$[&lt;name&gt;] EXIT                      # Cliente &lt;name&gt; faz logout
</pre>

<p>
Exemplo de fluxo de uso:
</p>
(Legenda:<br>
    <span style="color:#F9E79F">◼ Janela 0;</span>
    <span style="color:#F5B7B1">◼ Janela 1;</span>
    <span style="color:#A9CCE3">◼ Janela 2;</span>
    <span style="color:#ABEBC6">◼ Janela 3;</span><br>
    <span class="sp_p">%funcionamento interno/background%;</span><br>
    <span style="color:#222">input (comandos digitados)</span><br>
    <span class="sp_a">output (impressão de feedback na tela, originada tanto pelo cliente quanto pelo servidor)</span><br>)
<br>
<br>
Servidor é iniciado em background, na porta 53001:
<pre id="janela_0">./server 53001
</pre>

Cliente bruno é iniciado:
<pre id="janela_1">./client 127.0.0.1 53001 bruno
<span class="sp_p">%servidor registra o usuário bruno e o marca como online%</span>
<span class="sp_a">$[bruno]</span>
</pre>

Cliente paulo é iniciado:
<pre id="janela_2">./client 127.0.0.1 53001 paulo
<span class="sp_p">%servidor registra o usuário paulo e o marca como online%</span>
<span class="sp_a">$[paulo]</span>
</pre>

Cliente bruno envia mensagem para paulo:
<pre id="janela_1"><span class="sp_a">$[bruno]</span> SEND paulo "Oi!"
<span class="sp_p">%cliente calcula um msg_id <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-1">[1]</a>%</span>
<span class="sp_a">msg_id enviada!</span>
<span class="sp_p">%quando o servidor recebe a mensagem (ou seja, a mensagem foi enviada com sucesso para o servidor), \
  ele confirma para bruno, que imprime na tela o id da mensagem em questão%</span>
<span class="sp_a">msg_id enfileirada!</span>
<span class="sp_p">%quando paulo recebe a mensagem (ou seja, a mensagem foi enviada com sucesso para o destinatário), \
  ele confirma para bruno, que imprime na tela o id da mensagem em questão%</span>
<span class="sp_a">msg_id entregue!</span>
<span class="sp_a">$[bruno]</span>
</pre>

Neste momento, a janela de paulo estaria assim <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-2">[2]</a>:
<pre id="janela_2">./client 127.0.0.1 53001 paulo
<span class="sp_a">[bruno&gt;] Oi!</span>
<span class="sp_a">$[paulo]</span>
</pre>

Cliente paulo cria grupo lasca:
<pre id="janela_2"><span class="sp_a">$[paulo]</span> CREATEG lasca
<span class="sp_p">%servidor cria o grupo lasca e adiciona o usuario paulo à lista do grupo, \
  além de enviar uma confirmação de criação com sucesso para paulo%</span>
<span class="sp_a">grupo lasca criado com sucesso!</span>
<span class="sp_a">$[paulo]</span>
</pre>

Cliente bruno entra no grupo lasca e faz logout:
<pre id="janela_2"><span class="sp_a">$[bruno]</span> JOING lasca
<span class="sp_p">%servidor adiciona bruno ao grupo lasca e envia uma confirmação de entrada com sucesso para bruno%</span>
<span class="sp_a">bruno entrou no grupo lasca com sucesso!</span>
<span class="sp_a">$[bruno]</span> EXIT
<span class="sp_p">%cliente encerra a execução e servidor marca bruno como offline%</span>
</pre>

Cliente andre é iniciado, lista os usuários existentes, entra no grupo lasca e logo em seguida envia mensagem para o grupo:
<pre id="janela_3">./client 127.0.0.1 53001 andre
<span class="sp_p">%servidor registra o usuário andre e o marca como online%</span>
<span class="sp_a">$[andre]</span> WHO
<span class="sp_p">%servidor retorna ao usuário andre a lista de usuários, com seus status%</span>
<span class="sp_a">| usuario | status  |</span>
<span class="sp_a">| andre   | online  |</span>
<span class="sp_a">| bruno   | offline |</span>
<span class="sp_a">| paulo   | online  |</span>
<span class="sp_a">$[andre]</span> JOING lasca
<span class="sp_p">%servidor adiciona andre ao grupo lasca e envia uma confirmação de entrada com sucesso para andre%</span>
<span class="sp_a">andre entrou no grupo lasca com sucesso!</span>
<span class="sp_a">$[andre]</span> SENDG lasca "Quem está aí?"
<span class="sp_p">%cliente calcula um msg_id <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-3">[3]</a>%</span>
<span class="sp_a">msg_id enviada!</span>
<span class="sp_p">%quando o servidor recebe a mensagem (ou seja, a mensagem foi enviada com sucesso para o servidor), \
  ele confirma para andre, que imprime na tela o id da mensagem em questão%</span>
<span class="sp_a">msg_id enfileirada!</span>
<span class="sp_p">%servidor deveria consultar os membros do grupo, enviar com sucesso para paulo, \
  mas apenas guardar a mensagem para ser enviada para bruno posteriormente, pois o mesmo está offline%</span>
<span class="sp_a">$[andre]</span>
</pre>

Cliente bruno faz login novamente:
<pre id="janela_1">./client 127.0.0.1 53001 bruno
<span class="sp_p">%servidor marca bruno como online%</span>
<span class="sp_p">%servidor entrega as mensagens na fila de bruno%</span>
<span class="sp_a">[andre@lasca&gt;] Quem está aí?</span>
<span class="sp_a">$[bruno]</span>
</pre>

Cliente andre agora recebe a confirmação de que todos os membros do grupo lasca receberam a mensagem:
<pre id="janela_3"><span class="sp_a">msg_id entregue!</span>
<span class="sp_a">$[andre]</span>
</pre>

<div id="footnote-1">[1] <b>Sugestão:</b> calcular <code>msg_id = hash(bruno_paulo_Oi!)[0:6]</code>
  (ou seja, hash de remetente, destinatario e mensagem).<br>
  A função hash fica à escolha do aluno. Pegar os 6 ou 7 primeiros ou últimos
  caracteres do hash é o suficiente, para não trabalhar com msg_ids muito grandes.
</div>
<div id="footnote-2">[2] Note que o buffer de entrada (que continha "$[paulo]") foi salvo, substituído pela mensagem recebida,
  e replicado abaixo da mesma. <br>
  <strike><b>Sugestão:</b> Para apagar após salvar em um buffer auxiliar e poder substituir, o aluno pode testar <code>system("clear")</code>; imprimir um
  <code>\r</code> (carriage-return); imprimir vários <code>\b</code> (backspace); ou utilizar alguma biblioteca de terceiro.</strike> <br>
<b>Sugestão:</b> Acompanhar e-mail "dúvida apagar buffer corrente" na lista da disciplina.</div>
<div id="footnote-3">[3] <b>Sugestão:</b> Calcular um hash, como em <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-1">[1]</a>, mas utilizando o nome do grupo no lugar do destinatário, e algum marcador de grupo.
  Ex.: <code>msg_id = hash(andre_lasca_Quem está aí?_group)[0:6]</code></div>


                   <br><br>


                   <h4>
                     <b>Incremento 1: Envio de arquivos</b>
                   </h4>

                     Incrementar o Projeto Base com a possibilidade de enviar um arquivo para um outro cliente.
<br>
<br>
 <p>
 Protocolo a ser usado como interface dos clientes com o servidor:
 </p>
<pre id="exemplos">$[&lt;name&gt;] SENDF &lt;peer_name&gt; &lt;local_file_path&gt;    # Cliente &lt;name&gt; envia arquivo localizado em &lt;local_file_path&gt; para cliente &lt;peer_name&gt;
</pre>

<p>
Exemplo de fluxo de uso:
</p>
(Legenda:<br>
   <span style="color:#F9E79F">◼ Janela 0;</span>
   <span style="color:#F5B7B1">◼ Janela 1;</span>
   <span style="color:#A9CCE3">◼ Janela 2;</span>
   <span style="color:#ABEBC6">◼ Janela 3;</span><br>
   <span class="sp_p">%funcionamento interno/background%;</span><br>
   <span style="color:#222">input (comandos digitados)</span><br>
   <span class="sp_a">output (impressão de feedback na tela, originada tanto pelo cliente quanto pelo servidor)</span><br>)
<br>
<br>
Servidor é iniciado em background na porta 53001:
<pre id="janela_0">./server 53001
</pre>

Cliente bruno é iniciado:
<pre id="janela_1">./client 127.0.0.1 53001 bruno
<span class="sp_p">%servidor registra o usuário bruno e o marca como online%</span>
<span class="sp_a">$[bruno]</span>
</pre>

Cliente paulo é iniciado:
<pre id="janela_2">./client 127.0.0.1 53001 paulo
<span class="sp_p">%servidor registra o usuário paulo e o marca como online%</span>
<span class="sp_a">$[paulo]</span>
</pre>

Cliente bruno envia arquivo para paulo:
<pre id="janela_1"><span class="sp_a">$[bruno]</span> SENDF paulo /home/bruno/arquivo.txt
<span class="sp_p">%cliente calcula um msg_id <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-4">[4]</a>%</span>
<span class="sp_a">msg_id arquivo enviado!</span>
<span class="sp_p">%quando o servidor recebe o arquivo (ou seja, o arquivo foi enviado com sucesso para o servidor), \
  ele confirma para bruno, que imprime na tela o id da mensagem de arquivo em questão%</span>
<span class="sp_a">msg_id arquivo enfileirado!</span>
<span class="sp_p">%quando paulo recebe o arquivo (ou seja, o arquivo foi enviado com sucesso para o destinatário), \
  ele confirma para bruno, que imprime na tela o id da mensagem de arquivo em questão%</span>
<span class="sp_a">msg_id arquivo entregue!</span>
<span class="sp_a">$[bruno]</span>
</pre>

Cliente paulo recebe arquivo de bruno:
<pre id="janela_2"><span class="sp_a">$[bruno&gt;] arquivo arquivo.txt recebido em /home/paulo/Desktop</span>
<span class="sp_a">$[paulo]</span>
</pre>

<div id="footnote-4">[4] <b>Sugestão:</b> Calcular um hash, como em <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-1">[1]</a>, mas utilizando o nome do arquivo no lugar da mensagem, e algum marcador de arquivo.
  Ex.: <code>msg_id = hash(bruno_paulo_/home/bruno/arquivo.txt_file)[0:6]</code></div>

                   <br><br>

                  <h4>
                    <b>Incremento 2: Tic-tac-toe ("Jogo da velha")</b>
                  </h4>

                    Incrementar o Projeto Base com a possibilidade de iniciar uma partida de
                    Tic-tac-toe ("Jogo da velha") entre dois clientes.
<br>Esta melhoria traria o mesmo benefício que Telegram trouxe em relação ao WhatsApp, que apenas recentemente teve criptografia agregada mundialmente
<br>
<p>
Protocolo a ser usado como interface dos clientes com o servidor:
</p>
<pre id="exemplos">$[&lt;name&gt;] GAME &lt;peer_name&gt; &lt;x_axis&gt; &lt;y_axis&gt;    # Cliente &lt;name&gt; inicia uma partida com cliente &lt;peer_name&gt;, \
 marcando inicialmente a casa &lt;x_axis, y_axis&gt;
$[&lt;name&gt;] GAMEA &lt;peer_name&gt; &lt;x_axis&gt; &lt;y_axis&gt;   # Cliente &lt;name&gt; faz jogada na partida com cliente &lt;peer_name&gt;, marcando na casa &lt;x_axis, y_axis&gt;
</pre>

<p>
Exemplo de fluxo de uso:
</p>
(Legenda:<br>
  <span style="color:#F9E79F">◼ Janela 0;</span>
  <span style="color:#F5B7B1">◼ Janela 1;</span>
  <span style="color:#A9CCE3">◼ Janela 2;</span>
  <span style="color:#ABEBC6">◼ Janela 3;</span><br>
  <span class="sp_p">%funcionamento interno/background%;</span><br>
  <span style="color:#222">input (comandos digitados)</span><br>
  <span class="sp_a">output (impressão de feedback na tela, originada tanto pelo cliente quanto pelo servidor)</span><br>)
<br>
<br>
Servidor é iniciado em background na porta 53001:
<pre id="janela_0">./server 53001
</pre>

Cliente bruno é iniciado:
<pre id="janela_1">./client 127.0.0.1 53001 bruno
<span class="sp_p">%servidor registra o usuário bruno e o marca como online%</span>
<span class="sp_a">$[bruno]</span>
</pre>

Cliente paulo é iniciado:
<pre id="janela_2">./client 127.0.0.1 53001 paulo
<span class="sp_p">%servidor registra o usuário paulo e o marca como online%</span>
<span class="sp_a">$[paulo]</span>
</pre>

Cliente bruno inicia partida com paulo:
<pre id="janela_1"><span class="sp_a">$[bruno]</span> GAME paulo B 2
<span class="sp_p">%cliente calcula um msg_id <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-5">[5]</a>%</span>
<span class="sp_a">  A    B     C </span>
<span class="sp_a">3    |    |    </span>
<span class="sp_a"> ----|----|----</span>
<span class="sp_a">2    | X  |    </span>
<span class="sp_a"> ----|----|----</span>
<span class="sp_a">1    |    |    </span>
<span class="sp_a">msg_id pedido enviado!</span>
<span class="sp_p">%quando o servidor recebe o pedido (ou seja, o pedido foi enviado com sucesso para o servidor), \
 ele confirma para bruno, que imprime na tela o id do jogo em questão%</span>
<span class="sp_a">msg_id pedido enfileirado!</span>
<span class="sp_p">%quando paulo recebe o pedido (ou seja, o pedido foi enviado com sucesso para o destinatário), \
 ele confirma para bruno, que imprime na tela o id do jogo em questão%</span>
<span class="sp_a">msg_id pedido entregue!</span>
<span class="sp_a">$[bruno]</span>
</pre>

Cliente paulo faz jogada contra bruno:
<pre id="janela_2"><span class="sp_a">$[paulo]</span> GAMEA bruno C 3
<span class="sp_p">%cliente calcula um msg_id%</span>
<span class="sp_a">  A    B     C </span>
<span class="sp_a">3    |    |  O </span>
<span class="sp_a"> ----|----|----</span>
<span class="sp_a">2    | X  |    </span>
<span class="sp_a"> ----|----|----</span>
<span class="sp_a">1    |    |    </span>
<span class="sp_a">msg_id movimento enviado!</span>
<span class="sp_p">%quando o servidor recebe o pedido (ou seja, o pedido foi enviado com sucesso para o servidor), \
 ele confirma para paulo, que imprime na tela o id do jogo em questão%</span>
<span class="sp_a">msg_id movimento enfileirado!</span>
<span class="sp_p">%quando bruno recebe o pedido (ou seja, o pedido foi enviado com sucesso para o destinatário), \
 ele confirma para paulo, que imprime na tela o id do jogo em questão%</span>
<span class="sp_a">msg_id movimento entregue!</span>
<span class="sp_a">$[paulo]</span>
</pre>

<div id="footnote-5">[5] <b>Sugestão:</b> Calcular um hash, como em <a href="http://www.lasca.ic.unicamp.br/paulo/courses/pr/2016s1/info/projeto.html#footnote-1">[1]</a>, mas utilizando uma serialização do estado atual do jogo no lugar da mensagem, e algum marcador de jogo.
 Ex.: <code>msg_id = hash(bruno_paulo_1AI,1BI,1CI,2AI,2BX,2CI,3AI,3BI,3CI_game)[0:6]</code></div>

 <br><br>


 <h4>
   <b>Bônus: Canal seguro de comunicação</b>
 </h4>

   Incrementar o Projeto Completo (Projeto Base + Incrementos 1 e 2) com o estabelecimento de um canal seguro de comunicação entre dois clientes.
   A idéia é que as mensagens sejam transmitidas de forma cifrada entre dois clientes, e que apenas os dois clientes sejam capazes de
   decifrar as mensagens (ou seja, as mensagens devem ser armazenadas de forma cifrada no servidor) - e isso deve ser demonstrado.
   Esta melhoria traria o mesmo benefício que o Telegram trouxe em relação ao WhatsApp, que apenas recentemente teve criptografia agregada mundialmente.
   <br><br>
   Para implementar esse mecanismo, deve ser usado o algoritmo de Diffie-Hellman. Bibliotecas de terceiros estão liberadas e são recomendadas
   (se você não é um criptógrafo, provavelmente não deveria estar implementando sua própria criptografia).
   <br><br>
   Algumas referências que podem ser úteis:<br>
   [DH-1] Explicação bastante visual do algoritmo Diffie-Hellman Key Exchange: <a href="https://www.youtube.com/watch?v=YEBfamv-_do">https://www.youtube.com/watch?v=YEBfamv-_do</a><br>
   [DH-2] Outras explicações e discussões sobre o algoritmo: <a href="http://security.stackexchange.com/questions/45963/diffie-hellman-key-exchange-in-plain-english">http://security.stackexchange.com/questions/45963/diffie-hellman-key-exchange-in-plain-english</a>

            </div>
        </div>

    </div>
    <!-- /.container -->

    <footer>
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <p>Atualizado em: 15/mai/2016 15:00</p>
                </div>
            </div>
        </div>
    </footer>

    <!-- jQuery -->
    <script src="./Enunciado_files/jquery.js"></script>

    <!-- Bootstrap Core JavaScript -->
    <script src="./Enunciado_files/bootstrap.min.js"></script>

    <!-- Script to Activate the Carousel -->
    <script>
    $('.carousel').carousel({
        interval: 5000 //changes the speed
    })
    </script>




</div></body></html>